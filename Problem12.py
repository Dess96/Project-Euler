#Problem 12
#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
#The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ... We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?
import math

class triangle_num():
    def __init__(self):
        pass

    def find_triangular(self, n, sum):
        sum += n
        print("The known sum is ", sum)
        return sum
        
    def find_divisors(self, tot_sum):
        found = False
        divisors = 0
        i = 1
        while (i <= math.sqrt(tot_sum)):
            if(tot_sum % i == 0):
                if(tot_sum / i == i):
                    divisors += 1
                else:
                    divisors += 2
            i += 1 
        print("This number has ", divisors, " divisors")

        if(divisors > 500):
            found = True
            print("The number is ", tot_sum)
        return found

if __name__ == "__main__":
    tr = triangle_num()
    i = 8
    sum = 28
    found = False
    while(found == False):
        sum = tr.find_triangular(i, sum)
        i += 1
        found = tr.find_divisors(sum)